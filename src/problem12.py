# -*- coding: utf-8 -*-
"""
Created on Sun Jun 16 11:42:20 2019

@author: Vidya

Solution to Project Euler problem 12
https://projecteuler.net/problem=12

Problem Statement :
    
>>>>>>>>>>>  Highly divisible triangular number    

The sequence of triangle numbers is generated by adding the natural numbers. 
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 
The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

>>>>>>>>>>>  

Result : 
    
Expected Answer - 76576500

References :

1. Generate triangular numbers using formula i * (i + 1) / 2 

2. Used number theory - prime number factorization to get number of divisors  
for the triangular number. Explained at the following link
https://www.youtube.com/watch?v=jXRHfgqE1qY

3. To get prime factors of a number
https://www.mesacc.edu/~scotz47781/mat120/notes/radicals/simplify/images/examples/prime_factorization.html

"""
import math
import collections
import time

# Get prime numbers till limit using erastosthenes sieve method


def esieve(limit):

    multiples = set()

    for i in range(2, limit + 1):

        if i not in multiples:
            # prime number
            yield i

        # put all multiples of i into the set
        multiples.update(range(i*i, limit + 1, i))

# Generate triangle number using the formula - i * (i + 1) / 2


def gen_triangular_number(i):

    while True:

        # Formula to generate triangular number
        triangular_number = int(i * (i + 1) / 2)
        yield triangular_number

# Get the prime divisors of a number


def prime_divisors(number, primes):

    if number == 1:
        return [1]

    prime_factors = []

    # Number theory - Divisors can be limited till square root of the number
    limit = math.ceil(math.sqrt(number))

    for prime in primes:

        if prime < limit:
            while number % prime == 0:
                prime_factors.append(prime)
                number //= prime

        else:
            break

    # Add the last prime divisor
    if number not in [0, 1]:
        prime_factors.append(number)

    return prime_factors


def get_total_divisors(prime_factors):

    # Number theory - add 1 to the exponents of the prime divisors
    # Subsequently multiply the numbers to get total number of divisors
    factors = [x + 1 for x in collections.Counter(prime_factors).values()]

    product = 1

    for x in factors:
        product *= x

    return product


if __name__ == '__main__':

    start_time = time.time()

    # Get set of primes only once with a max limit
    max_limit_primes = 500000
    primes = [x for x in esieve(max_limit_primes)]

    # Max number of divisors for triangle number
    divisors_limit = 500

    # To generate triangle numbers
    i = 1

    # First triangle number
    triangle_number = gen_triangular_number(i).__next__()

    num_of_divisors = 0

    while num_of_divisors < divisors_limit:

        num_of_divisors = get_total_divisors(
            prime_divisors(triangle_number, primes))

        if num_of_divisors < divisors_limit:
            triangle_number = gen_triangular_number(i).__next__()
            i += 1

    total_time = time.time() - start_time

    print('Time taken ', total_time)

    print('Triangular number with over 500 divisors - ', triangle_number)
